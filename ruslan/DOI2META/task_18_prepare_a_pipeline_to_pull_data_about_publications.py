# -*- coding: utf-8 -*-
"""Task 18: prepare a pipeline to pull data about publications.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_-pS-Qbb-J4m9Ykr5PnR7OFOsQla2b1
"""

pip install requests

pip install biopython

pip install odfpy

!wget -O "openTECR recuration.ods" "https://docs.google.com/spreadsheets/d/1jLIxEXVzE2SAzIB0UxBfcFoHrzjzf9euB6ART2VDE8c/export?format=ods"

import pandas as pd
from Bio import Entrez
import numpy as np
import time

def crossref(doi):
    url = f"https://api.crossref.org/works/{doi}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": f"DOI not found in CrossRef: {doi}"}

def pubmed(pmid):
    handle = Entrez.efetch(db="pubmed", id=pmid, retmode="xml")
    response = Entrez.read(handle)
    handle.close()
    return response

def doires2meta(response):
  metadata = {}
  metadata['Title'] = response['message']['title']
  date = response['message']['created']['date-parts'][0]
  metadata['Date'] = f'{date[2]}.{date[1]}.{date[0]}'
  metadata['Publisher'] = response['message']['publisher']
  metadata['License'] = response['message']['license'][0]['URL']
  metadata['Type'] = response['message']['type']
  metadata['Volume'] = response['message']['volume']
  metadata['Issue'] = response['message']['issue']
  metadata['Page'] = response['message']['page']
  fn = []
  sn = []
  for b in response['message']['author']:
    fn.append(b['given'])
    sn.append(b['family'])

  string = ''

  for i in range(len(fn)):
    string = string + fn[i] + " " + sn[i] + ", "

  string = string[:-2]
  metadata['Authors'] = string
  metadata['Language'] = response['message']['language']
  return metadata

def pubmed2meta(response):
  metadata = {}
  try:
    metadata['Language'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Language']
  except:
    metadata['Language'] = '-'
  try:
    metadata['Volume'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume']
  except:
    metadata['Volume'] = '-'
  try:
    metadata['Issue'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue']
  except:
    metadata['Issue'] = "-"
  try:
    metadata['Page'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn']
  except:
    metadata['Page'] = "-"
  date  = response['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']
  try:
    metadata['Journal'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title']
  except:
    metadata['Journal'] = "-"
  try:
    metadata['Abstract'] = response['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0]
  except:
    metadata['Abstract'] = '-'
  #print(date)
  try:
    month = date['Month']
  except:
    month = ' '
  year = date['Year']
  metadata['Date'] = f'{month} {year}'
  try:
    fn = []
    sn = []
    for b in response['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']:
      fn.append(b['ForeName'])
      sn.append(b['LastName'])

    string = ''

    for i in range(len(fn)):
      string = string + fn[i] + " " + sn[i] + ", "

    string = string[:-2]
    metadata['Authors'] = string
  except:
    metadata['Authors'] = "-"
  return metadata

def return_blank(indi):
  metadata = {}
  if indi == "pub":
    metadata['Language'] = '-'
    metadata['Volume'] = '-'
    metadata['Issue'] = '-'
    metadata['Page'] = '-'
    metadata['Journal'] = '-'
    metadata['Abstract'] = '-'
    metadata['Date'] = '-'
    metadata['Authors'] = '-'
  if indi == "doi":
    metadata['Title'] = '-'
    metadata['Language'] = '-'
    metadata['Volume'] = '-'
    metadata['Issue'] = '-'
    metadata['Page'] = '-'
    metadata['Publisher'] = '-'
    metadata['Date'] = '-'
    metadata['Authors'] = '-'
    metadata['License'] = '-'
    metadata['Type'] = '-'
  return metadata

Entrez.email = "ruslanibragimovut@outlook.com"
df = pd.read_excel("openTECR recuration.ods", sheet_name="references")
pmids = df['pmid'].to_list()
dois = df['doi'].to_list()

doismeta = []
for d in dois:
  if type(d) == type('Is a string?'):
    r = crossref(d)
    #print(r)

    try:
      d = doires2meta(r)
    except:
      d = return_blank('doi')

    doismeta.append(d)
  else:
    c = return_blank('doi')
    doismeta.append(c)

pmidsmeta = []
for pmid in pmids:
  if np.isnan(pmid) == False:
    time.sleep(1)
    r = pubmed(str(pmid))
    #print(r)
    d = pubmed2meta(r)
    pmidsmeta.append(d)
  else:
    c = return_blank('pub')
    pmidsmeta.append(c)

dfpub = pd.DataFrame(pmidsmeta)
dfdoi = pd.DataFrame(doismeta)

dfpubC = pd.concat([df, dfpub], axis=1)
dfdoiC = pd.concat([df, dfdoi], axis=1)
dfpubC.to_csv('openTECRmetadataPubMed.csv')
dfdoiC.to_csv('openTECRmetadataDOI.csv')